[{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '437', 'url': 'https://public-firing-range.appspot.com', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '0', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '437', 'url': 'https://public-firing-range.appspot.com', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '1', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '437', 'url': 'https://public-firing-range.appspot.com', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '2', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '463', 'url': 'https://public-firing-range.appspot.com/address/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '3', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '463', 'url': 'https://public-firing-range.appspot.com/address/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '4', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '463', 'url': 'https://public-firing-range.appspot.com/address/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '5', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '495', 'url': 'https://public-firing-range.appspot.com/angular/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '6', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '495', 'url': 'https://public-firing-range.appspot.com/angular/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '7', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '495', 'url': 'https://public-firing-range.appspot.com/angular/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '8', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '521', 'url': 'https://public-firing-range.appspot.com/badscriptimport/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '9', 'alertRef': '10015'}, {'sourceid': '3', 'other': '192.168.1.2\n192.168.1.2\n', 'method': 'GET', 'evidence': '192.168.1.2', 'pluginId': '2', 'cweid': '200', 'confidence': 'Medium', 'wascid': '13', 'description': 'A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.', 'messageId': '521', 'url': 'https://public-firing-range.appspot.com/badscriptimport/index.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A03': 'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html'}, 'reference': 'https://tools.ietf.org/html/rfc1918', 'solution': 'Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.', 'alert': 'Private IP Disclosure', 'param': '', 'attack': '', 'name': 'Private IP Disclosure', 'risk': 'Low', 'id': '10', 'alertRef': '2'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '521', 'url': 'https://public-firing-range.appspot.com/badscriptimport/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '11', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '521', 'url': 'https://public-firing-range.appspot.com/badscriptimport/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '12', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '527', 'url': 'https://public-firing-range.appspot.com/cors/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '13', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '527', 'url': 'https://public-firing-range.appspot.com/cors/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '14', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '527', 'url': 'https://public-firing-range.appspot.com/cors/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '15', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '532', 'url': 'https://public-firing-range.appspot.com/dom/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '16', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '532', 'url': 'https://public-firing-range.appspot.com/dom/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '17', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '532', 'url': 'https://public-firing-range.appspot.com/dom/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '18', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '579', 'url': 'https://public-firing-range.appspot.com/escape/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '19', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '579', 'url': 'https://public-firing-range.appspot.com/escape/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '20', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '579', 'url': 'https://public-firing-range.appspot.com/escape/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '21', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '629', 'url': 'https://public-firing-range.appspot.com/flashinjection/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '22', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '629', 'url': 'https://public-firing-range.appspot.com/flashinjection/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '23', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '629', 'url': 'https://public-firing-range.appspot.com/flashinjection/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '24', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '636', 'url': 'https://public-firing-range.appspot.com/mixedcontent/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '25', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'tag=script src=http://public-firing-range.appspot.com/mixedcontent/script.js\n', 'method': 'GET', 'evidence': 'http://public-firing-range.appspot.com/mixedcontent/script.js', 'pluginId': '10040', 'cweid': '311', 'confidence': 'Medium', 'wascid': '4', 'description': 'The page includes mixed content, that is content accessed via HTTP instead of HTTPS.', 'messageId': '636', 'url': 'https://public-firing-range.appspot.com/mixedcontent/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html', 'WSTG-v42-CRYP-03': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html', 'solution': 'A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.', 'alert': 'Secure Pages Include Mixed Content (Including Scripts)', 'param': '', 'attack': '', 'name': 'Secure Pages Include Mixed Content (Including Scripts)', 'risk': 'Medium', 'id': '26', 'alertRef': '10040'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '636', 'url': 'https://public-firing-range.appspot.com/mixedcontent/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '27', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '636', 'url': 'https://public-firing-range.appspot.com/mixedcontent/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '28', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '641', 'url': 'https://public-firing-range.appspot.com/redirect/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '29', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '641', 'url': 'https://public-firing-range.appspot.com/redirect/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '30', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '641', 'url': 'https://public-firing-range.appspot.com/redirect/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '31', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '648', 'url': 'https://public-firing-range.appspot.com/reflected/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '32', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '648', 'url': 'https://public-firing-range.appspot.com/reflected/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '33', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '648', 'url': 'https://public-firing-range.appspot.com/reflected/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '34', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '700', 'url': 'https://public-firing-range.appspot.com/remoteinclude/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '35', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '700', 'url': 'https://public-firing-range.appspot.com/remoteinclude/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '36', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '700', 'url': 'https://public-firing-range.appspot.com/remoteinclude/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '37', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '714', 'url': 'https://public-firing-range.appspot.com/tags/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '38', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '714', 'url': 'https://public-firing-range.appspot.com/tags/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '39', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '714', 'url': 'https://public-firing-range.appspot.com/tags/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '40', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '729', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '41', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '729', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '42', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '729', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '43', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '743', 'url': 'https://public-firing-range.appspot.com/vulnerablelibraries/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '44', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '743', 'url': 'https://public-firing-range.appspot.com/vulnerablelibraries/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '45', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '743', 'url': 'https://public-firing-range.appspot.com/vulnerablelibraries/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '46', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '745', 'url': 'https://public-firing-range.appspot.com/urldom/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '47', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '745', 'url': 'https://public-firing-range.appspot.com/urldom/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '48', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '745', 'url': 'https://public-firing-range.appspot.com/urldom/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '49', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '777', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '50', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '777', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '51', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '777', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '52', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '786', 'url': 'https://public-firing-range.appspot.com/leakedcookie/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '53', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '786', 'url': 'https://public-firing-range.appspot.com/leakedcookie/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '54', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '786', 'url': 'https://public-firing-range.appspot.com/leakedcookie/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '55', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '796', 'url': 'https://public-firing-range.appspot.com/address/location.hash/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '56', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '796', 'url': 'https://public-firing-range.appspot.com/address/location.hash/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '57', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '798', 'url': 'https://public-firing-range.appspot.com/address/location.hash/assign', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '58', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '798', 'url': 'https://public-firing-range.appspot.com/address/location.hash/assign', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '59', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '799', 'url': 'https://public-firing-range.appspot.com/address/location.hash/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '60', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '799', 'url': 'https://public-firing-range.appspot.com/address/location.hash/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '61', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '800', 'url': 'https://public-firing-range.appspot.com/address/location.hash/documentwriteln', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '62', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '800', 'url': 'https://public-firing-range.appspot.com/address/location.hash/documentwriteln', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '63', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '802', 'url': 'https://public-firing-range.appspot.com/address/location.hash/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '64', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '802', 'url': 'https://public-firing-range.appspot.com/address/location.hash/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '65', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '803', 'url': 'https://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '66', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '803', 'url': 'https://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '67', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '805', 'url': 'https://public-firing-range.appspot.com/address/location.hash/replace', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '68', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '805', 'url': 'https://public-firing-range.appspot.com/address/location.hash/replace', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '69', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '809', 'url': 'https://public-firing-range.appspot.com/address/location.hash/setTimeout', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '70', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '809', 'url': 'https://public-firing-range.appspot.com/address/location.hash/setTimeout', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '71', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '811', 'url': 'https://public-firing-range.appspot.com/address/location.hash/function', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '72', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '811', 'url': 'https://public-firing-range.appspot.com/address/location.hash/function', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '73', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '812', 'url': 'https://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '74', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '812', 'url': 'https://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '75', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '816', 'url': 'https://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '76', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '816', 'url': 'https://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '77', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '819', 'url': 'https://public-firing-range.appspot.com/address/location.hash/jshref', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '78', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '819', 'url': 'https://public-firing-range.appspot.com/address/location.hash/jshref', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '79', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '821', 'url': 'https://public-firing-range.appspot.com/address/location.hash/inlineevent', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '80', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '821', 'url': 'https://public-firing-range.appspot.com/address/location.hash/inlineevent', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '81', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '822', 'url': 'https://public-firing-range.appspot.com/address/location.hash/formaction', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '82', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '822', 'url': 'https://public-firing-range.appspot.com/address/location.hash/formaction', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '83', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '824', 'url': 'https://public-firing-range.appspot.com/address/location/assign', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '84', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '824', 'url': 'https://public-firing-range.appspot.com/address/location/assign', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '85', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '827', 'url': 'https://public-firing-range.appspot.com/address/location/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '86', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '827', 'url': 'https://public-firing-range.appspot.com/address/location/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '87', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '831', 'url': 'https://public-firing-range.appspot.com/address/location/documentwriteln', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '88', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '831', 'url': 'https://public-firing-range.appspot.com/address/location/documentwriteln', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '89', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '833', 'url': 'https://public-firing-range.appspot.com/address/location/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '90', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '833', 'url': 'https://public-firing-range.appspot.com/address/location/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '91', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '835', 'url': 'https://public-firing-range.appspot.com/address/location/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '92', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '835', 'url': 'https://public-firing-range.appspot.com/address/location/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '93', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '836', 'url': 'https://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '94', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '836', 'url': 'https://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '95', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '837', 'url': 'https://public-firing-range.appspot.com/address/location/replace', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '96', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '837', 'url': 'https://public-firing-range.appspot.com/address/location/replace', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '97', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '840', 'url': 'https://public-firing-range.appspot.com/address/location/setTimeout', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '98', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '840', 'url': 'https://public-firing-range.appspot.com/address/location/setTimeout', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '99', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '842', 'url': 'https://public-firing-range.appspot.com/address/documentURI/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '100', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '842', 'url': 'https://public-firing-range.appspot.com/address/documentURI/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '101', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '845', 'url': 'https://public-firing-range.appspot.com/address/baseURI/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '102', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '845', 'url': 'https://public-firing-range.appspot.com/address/baseURI/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '103', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '849', 'url': 'https://public-firing-range.appspot.com/address/locationhref/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '104', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '849', 'url': 'https://public-firing-range.appspot.com/address/locationhref/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '105', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '852', 'url': 'https://public-firing-range.appspot.com/address/locationpathname/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '106', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '852', 'url': 'https://public-firing-range.appspot.com/address/locationpathname/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '107', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '854', 'url': 'https://public-firing-range.appspot.com/address/locationsearch/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '108', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '854', 'url': 'https://public-firing-range.appspot.com/address/locationsearch/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '109', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '856', 'url': 'https://public-firing-range.appspot.com/address/URL/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '110', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '856', 'url': 'https://public-firing-range.appspot.com/address/URL/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '111', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '858', 'url': 'https://public-firing-range.appspot.com/address/URLUnencoded/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '112', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '858', 'url': 'https://public-firing-range.appspot.com/address/URLUnencoded/documentwrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '113', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '860', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '114', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '860', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '115', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '860', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.1.5?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '116', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '862', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '117', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '862', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '118', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '862', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '119', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '863', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.2.18/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '120', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '863', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '121', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '863', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.18?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '122', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '864', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '123', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '864', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '124', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '864', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.19?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '125', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.24/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '865', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.2.24/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '126', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '865', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '127', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '865', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.2.24?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '128', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '866', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '129', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '866', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '130', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '866', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.6.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '131', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '867', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '132', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '867', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '133', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '867', 'url': 'https://public-firing-range.appspot.com/angular/angular_body/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '134', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '868', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '135', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '868', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '136', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '868', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_alt_symbols/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '137', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '871', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '138', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '871', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '139', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '871', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_alt_symbols_raw/1.6.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '140', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '874', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '141', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '874', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '142', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '874', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '143', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '877', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '144', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: "q" ].', 'method': 'GET', 'evidence': '<form action="" method="post">', 'pluginId': '10202', 'cweid': '352', 'confidence': 'Medium', 'wascid': '9', 'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", 'messageId': '877', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'WSTG-v42-SESS-05': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html'}, 'reference': 'http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html', 'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.', 'alert': 'Absence of Anti-CSRF Tokens', 'param': '', 'attack': '', 'name': 'Absence of Anti-CSRF Tokens', 'risk': 'Low', 'id': '145', 'alertRef': '10202'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '877', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '146', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '877', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '147', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '880', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '148', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '880', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '149', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '880', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_escaped/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '150', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '882', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '151', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '882', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '152', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '882', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_escaped_alt_symbols/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '153', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '887', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '154', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '887', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '155', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '887', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_ng/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '156', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '891', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '157', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '891', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '158', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '891', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '159', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '896', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '160', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '896', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '161', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '896', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_attribute_non_ng_raw/1.4.0?q=test', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '162', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '898', 'url': 'https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '163', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '898', 'url': 'https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '164', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '898', 'url': 'https://public-firing-range.appspot.com/angular/angular_form_parse/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '165', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '901', 'url': 'https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '166', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '901', 'url': 'https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '167', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '901', 'url': 'https://public-firing-range.appspot.com/angular/angular_cookie_parse/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '168', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '906', 'url': 'https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '169', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '906', 'url': 'https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '170', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '906', 'url': 'https://public-firing-range.appspot.com/angular/angular_storage_parse/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '171', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '909', 'url': 'https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '172', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '909', 'url': 'https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '173', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '909', 'url': 'https://public-firing-range.appspot.com/angular/angular_post_message_parse/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '174', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="http://127.0.0.2/localhost_import.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '912', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'http://127.0.0.2/localhost_import.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '175', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'tag=script src=http://127.0.0.2/localhost_import.js\n', 'method': 'GET', 'evidence': 'http://127.0.0.2/localhost_import.js', 'pluginId': '10040', 'cweid': '311', 'confidence': 'Medium', 'wascid': '4', 'description': 'The page includes mixed content, that is content accessed via HTTP instead of HTTPS.', 'messageId': '912', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html', 'WSTG-v42-CRYP-03': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html', 'solution': 'A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.', 'alert': 'Secure Pages Include Mixed Content (Including Scripts)', 'param': '', 'attack': '', 'name': 'Secure Pages Include Mixed Content (Including Scripts)', 'risk': 'Medium', 'id': '176', 'alertRef': '10040'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '912', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '177', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '912', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://127.0.0.2/localhost_import.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '178', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="http://192.168.1.2/private_network_import.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '916', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'http://192.168.1.2/private_network_import.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '179', 'alertRef': '10017'}, {'sourceid': '3', 'other': '192.168.1.2\n', 'method': 'GET', 'evidence': '192.168.1.2', 'pluginId': '2', 'cweid': '200', 'confidence': 'Medium', 'wascid': '13', 'description': 'A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.', 'messageId': '916', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A03': 'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html'}, 'reference': 'https://tools.ietf.org/html/rfc1918', 'solution': 'Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.', 'alert': 'Private IP Disclosure', 'param': '', 'attack': '', 'name': 'Private IP Disclosure', 'risk': 'Low', 'id': '180', 'alertRef': '2'}, {'sourceid': '3', 'other': 'tag=script src=http://192.168.1.2/private_network_import.js\n', 'method': 'GET', 'evidence': 'http://192.168.1.2/private_network_import.js', 'pluginId': '10040', 'cweid': '311', 'confidence': 'Medium', 'wascid': '4', 'description': 'The page includes mixed content, that is content accessed via HTTP instead of HTTPS.', 'messageId': '916', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html', 'WSTG-v42-CRYP-03': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html', 'solution': 'A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.', 'alert': 'Secure Pages Include Mixed Content (Including Scripts)', 'param': '', 'attack': '', 'name': 'Secure Pages Include Mixed Content (Including Scripts)', 'risk': 'Medium', 'id': '181', 'alertRef': '10040'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '916', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '182', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '916', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://192.168.1.2/private_network_import.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '183', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="http://g00gle.com/typosquatting_domain.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '924', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'http://g00gle.com/typosquatting_domain.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '184', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'tag=script src=http://g00gle.com/typosquatting_domain.js\n', 'method': 'GET', 'evidence': 'http://g00gle.com/typosquatting_domain.js', 'pluginId': '10040', 'cweid': '311', 'confidence': 'Medium', 'wascid': '4', 'description': 'The page includes mixed content, that is content accessed via HTTP instead of HTTPS.', 'messageId': '924', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html', 'WSTG-v42-CRYP-03': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html', 'solution': 'A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.', 'alert': 'Secure Pages Include Mixed Content (Including Scripts)', 'param': '', 'attack': '', 'name': 'Secure Pages Include Mixed Content (Including Scripts)', 'risk': 'Medium', 'id': '185', 'alertRef': '10040'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '924', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '186', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '924', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=http://g00gle.com/typosquatting_domain.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '187', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '928', 'url': 'https://public-firing-range.appspot.com/cors/alloworigin/dynamicAllowOrigin', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '188', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '928', 'url': 'https://public-firing-range.appspot.com/cors/alloworigin/dynamicAllowOrigin', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '189', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '935', 'url': 'https://public-firing-range.appspot.com/cors/alloworigin/allowNullOrigin', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '190', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '935', 'url': 'https://public-firing-range.appspot.com/cors/alloworigin/allowNullOrigin', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '191', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '941', 'url': 'https://public-firing-range.appspot.com/cors/alloworigin/allowInsecureScheme', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '192', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '941', 'url': 'https://public-firing-range.appspot.com/cors/alloworigin/allowInsecureScheme', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '193', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '943', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '194', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '943', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '195', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '948', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '196', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '948', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '197', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '951', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '198', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '951', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/cookie_set/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '199', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '953', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/cookie/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '200', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '953', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/cookie/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '201', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '956', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '202', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '956', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '203', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '958', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '204', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '958', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '205', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '959', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '206', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '959', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/document/referrer/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '207', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '960', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/window/name/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '208', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '960', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/window/name/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '209', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '963', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '210', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '963', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/window/name/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '211', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '964', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/window/name/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '212', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '964', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/window/name/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '213', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '965', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '214', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '965', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '215', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '973', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '216', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '973', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '217', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '980', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '218', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '980', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '219', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '983', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '220', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '983', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '221', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '985', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '222', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '985', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/localStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '223', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '993', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '224', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '993', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '225', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '999', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '226', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '999', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '227', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1002', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '228', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1002', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '229', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1004', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '230', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1004', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '231', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1006', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '232', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1006', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/localStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '233', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1009', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '234', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1009', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '235', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1012', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '236', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1012', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '237', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1014', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '238', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1014', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '239', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1021', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '240', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1021', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '241', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1022', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '242', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1022', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/sessionStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '243', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1030', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '244', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1030', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '245', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1035', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '246', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1035', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '247', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1045', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '248', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1045', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '249', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1048', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '250', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1048', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '251', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1053', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '252', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1053', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/external/sessionStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '253', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1056', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '254', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1056', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '255', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1060', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '256', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1060', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '257', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1061', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '258', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1061', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '259', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1062', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithPartialStringComparison', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '260', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1062', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithPartialStringComparison', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '261', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1063', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/complexMessageDocumentWriteEval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '262', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1063', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/complexMessageDocumentWriteEval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '263', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1064', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithRegExp', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '264', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1064', 'url': 'https://public-firing-range.appspot.com/dom/toxicdom/postMessage/improperOriginValidationWithRegExp', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '265', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1065', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '266', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1065', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '267', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1070', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '268', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1070', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '269', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1072', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '270', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1072', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/formSubmission/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '271', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1075', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '272', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1075', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '273', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1077', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '274', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1077', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '275', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1078', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '276', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1078', 'url': 'https://public-firing-range.appspot.com/dom/eventtriggering/document/inputTyping/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '277', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '1080', 'url': 'https://public-firing-range.appspot.com/dom/javascripturi.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '278', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1080', 'url': 'https://public-firing-range.appspot.com/dom/javascripturi.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '279', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1080', 'url': 'https://public-firing-range.appspot.com/dom/javascripturi.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '280', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1082', 'url': 'https://public-firing-range.appspot.com/dom/dompropagation/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '281', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1082', 'url': 'https://public-firing-range.appspot.com/dom/dompropagation/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '282', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1084', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '283', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1084', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '284', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1087', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '285', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1087', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '286', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1090', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/head?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '287', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1090', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/head?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '288', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1092', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/head?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '289', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1092', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/head?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '290', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1093', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '291', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1093', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/body_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '292', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1094', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '293', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1094', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/body_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '294', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1095', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/textarea?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '295', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1095', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/textarea?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '296', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1096', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/textarea?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '297', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1096', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/textarea?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '298', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1097', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/tagname?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '299', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1097', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/tagname?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '300', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1102', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/tagname?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '301', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1102', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/tagname?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '302', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1103', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_unquoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '303', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1103', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_unquoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '304', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1106', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_unquoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '305', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1106', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_unquoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '306', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1107', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_singlequoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '307', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1107', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_singlequoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '308', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1109', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_singlequoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '309', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1109', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_singlequoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '310', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1110', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_quoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '311', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1110', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_quoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '312', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1115', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_quoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '313', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1115', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_quoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '314', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1116', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_name?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '315', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1116', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_name?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '316', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1122', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_name?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '317', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1122', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_name?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '318', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1123', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '319', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1123', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '320', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1127', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '321', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1127', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '322', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1128', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_value?escape=HTML_ESCAPE&q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '323', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1128', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_value?escape=HTML_ESCAPE&q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '324', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1131', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '325', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1131', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '326', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1134', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_font_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '327', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1134', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_style_font_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '328', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1138', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_font_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '329', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1138', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_style_font_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '330', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1139', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_assignment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '331', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1139', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_assignment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '332', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1142', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_assignment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '333', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1142', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_assignment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '334', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1144', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_eval?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '335', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1144', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_eval?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '336', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1149', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_eval?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '337', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1149', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_eval?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '338', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1151', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_quoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '339', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1151', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_quoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '340', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1154', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_quoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '341', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1154', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_quoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '342', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1156', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_singlequoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '343', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1156', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_singlequoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '344', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1157', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_singlequoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '345', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1157', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_singlequoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '346', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1158', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_slashquoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '347', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1158', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_slashquoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '348', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1161', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_slashquoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '349', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1161', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_slashquoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '350', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1163', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '351', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1163', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/js_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '352', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1165', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '353', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1165', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/js_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '354', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="http://irrelevant.google.com?a"/>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '1166', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'http://irrelevant.google.com?a', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '355', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'tag=script src=http://irrelevant.google.com?a\n', 'method': 'GET', 'evidence': 'http://irrelevant.google.com?a', 'pluginId': '10040', 'cweid': '311', 'confidence': 'Medium', 'wascid': '4', 'description': 'The page includes mixed content, that is content accessed via HTTP instead of HTTPS.', 'messageId': '1166', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html', 'WSTG-v42-CRYP-03': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html', 'solution': 'A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.', 'alert': 'Secure Pages Include Mixed Content (Including Scripts)', 'param': '', 'attack': '', 'name': 'Secure Pages Include Mixed Content (Including Scripts)', 'risk': 'Medium', 'id': '356', 'alertRef': '10040'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1166', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '357', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1166', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '358', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="http://irrelevant.google.com?a"/>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '1169', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'http://irrelevant.google.com?a', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '359', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'tag=script src=http://irrelevant.google.com?a\n', 'method': 'GET', 'evidence': 'http://irrelevant.google.com?a', 'pluginId': '10040', 'cweid': '311', 'confidence': 'Medium', 'wascid': '4', 'description': 'The page includes mixed content, that is content accessed via HTTP instead of HTTPS.', 'messageId': '1169', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html', 'WSTG-v42-CRYP-03': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html', 'solution': 'A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.', 'alert': 'Secure Pages Include Mixed Content (Including Scripts)', 'param': '', 'attack': '', 'name': 'Secure Pages Include Mixed Content (Including Scripts)', 'risk': 'Medium', 'id': '360', 'alertRef': '10040'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1169', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '361', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1169', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '362', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1176', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_import?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '363', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1176', 'url': 'https://public-firing-range.appspot.com/escape/serverside/escapeHtml/css_import?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '364', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1182', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_import?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '365', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1182', 'url': 'https://public-firing-range.appspot.com/escape/serverside/encodeUrl/css_import?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '366', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1185', 'url': 'https://public-firing-range.appspot.com/escape/js/escape?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '367', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1185', 'url': 'https://public-firing-range.appspot.com/escape/js/escape?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '368', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1191', 'url': 'https://public-firing-range.appspot.com/escape/js/encodeURIComponent?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '369', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1191', 'url': 'https://public-firing-range.appspot.com/escape/js/encodeURIComponent?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '370', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1192', 'url': 'https://public-firing-range.appspot.com/escape/js/html_escape?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '371', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1192', 'url': 'https://public-firing-range.appspot.com/escape/js/html_escape?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '372', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '1195', 'url': 'https://public-firing-range.appspot.com/flashinjection/callbackParameterDoesNothing?callback=func', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '373', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1195', 'url': 'https://public-firing-range.appspot.com/flashinjection/callbackParameterDoesNothing?callback=func', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '374', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '1196', 'url': 'https://public-firing-range.appspot.com/flashinjection/callbackIsEchoedBack?callback=func', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '375', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1196', 'url': 'https://public-firing-range.appspot.com/flashinjection/callbackIsEchoedBack?callback=func', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '376', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1211', 'url': 'https://public-firing-range.appspot.com/redirect/meta?q=/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '378', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1211', 'url': 'https://public-firing-range.appspot.com/redirect/meta?q=/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '379', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1212', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/body?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '380', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1212', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/body?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '381', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1214', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/head?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '382', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1214', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/head?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '383', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1215', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/title?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '384', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1215', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/title?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '385', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1216', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/body_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '386', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1216', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/body_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '387', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1217', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/tagname?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '388', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1217', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/tagname?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '389', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1218', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_unquoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '390', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1218', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_unquoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '391', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1219', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_singlequoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '392', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1219', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_singlequoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '393', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1220', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_quoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '394', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1220', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_quoted?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '395', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1221', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_name?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '396', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1221', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_name?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '397', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HTTP/1.1 500 Internal Server Error', 'pluginId': '90022', 'cweid': '200', 'confidence': 'Medium', 'wascid': '13', 'description': 'This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.', 'messageId': '1227', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/body/500?q=a', 'tags': {'WSTG-v42-ERRH-02': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces', 'WSTG-v42-ERRH-01': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling', 'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': '', 'solution': 'Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.', 'alert': 'Application Error Disclosure', 'param': '', 'attack': '', 'name': 'Application Error Disclosure', 'risk': 'Low', 'id': '398', 'alertRef': '90022'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1233', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/iframe_attribute_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '399', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1233', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/iframe_attribute_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '400', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1234', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/iframe_srcdoc?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '401', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1234', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/iframe_srcdoc?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '402', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1236', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/textarea?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '403', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1236', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/textarea?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '404', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1237', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/textarea_attribute_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '405', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1237', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/textarea_attribute_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '406', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1238', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/noscript?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '407', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1238', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/noscript?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '408', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1239', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/style_attribute_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '409', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1239', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/style_attribute_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '410', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1243', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/css_style?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '411', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1243', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/css_style?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '412', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1244', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/css_style_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '413', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1244', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/css_style_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '414', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1249', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/css_style_font_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '415', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1249', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/css_style_font_value?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '416', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1250', 'url': 'https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_unquoted/UNQUOTED_ATTRIBUTE?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '417', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1250', 'url': 'https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_unquoted/UNQUOTED_ATTRIBUTE?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '418', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1255', 'url': 'https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_quoted/DOUBLE_QUOTED_ATTRIBUTE?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '419', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1255', 'url': 'https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_quoted/DOUBLE_QUOTED_ATTRIBUTE?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '420', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1257', 'url': 'https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_singlequoted/SINGLE_QUOTED_ATTRIBUTE?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '421', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1257', 'url': 'https://public-firing-range.appspot.com/reflected/escapedparameter/js_eventhandler_singlequoted/SINGLE_QUOTED_ATTRIBUTE?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '422', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1259', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_assignment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '423', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1259', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_assignment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '424', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1260', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_eval?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '425', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1260', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_eval?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '426', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1261', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_quoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '427', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1261', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_quoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '428', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1262', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_singlequoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '429', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1262', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_singlequoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '430', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1264', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_slashquoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '431', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1264', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_slashquoted_string?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '432', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1265', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '433', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1265', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/js_comment?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '434', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="http://irrelevant.google.com/a"/>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '1268', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'http://irrelevant.google.com/a', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '435', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'tag=script src=http://irrelevant.google.com/a\n', 'method': 'GET', 'evidence': 'http://irrelevant.google.com/a', 'pluginId': '10040', 'cweid': '311', 'confidence': 'Medium', 'wascid': '4', 'description': 'The page includes mixed content, that is content accessed via HTTP instead of HTTPS.', 'messageId': '1268', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html', 'WSTG-v42-CRYP-03': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html', 'solution': 'A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS.\nThe page must not contain any content that is transmitted over unencrypted HTTP.\n This includes content from third party sites.', 'alert': 'Secure Pages Include Mixed Content (Including Scripts)', 'param': '', 'attack': '', 'name': 'Secure Pages Include Mixed Content (Including Scripts)', 'risk': 'Medium', 'id': '436', 'alertRef': '10040'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1268', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '437', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1268', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/attribute_script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '438', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1269', 'url': 'https://public-firing-range.appspot.com/reflected/url/href?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '439', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1269', 'url': 'https://public-firing-range.appspot.com/reflected/url/href?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '440', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1275', 'url': 'https://public-firing-range.appspot.com/reflected/url/css_import?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '441', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1275', 'url': 'https://public-firing-range.appspot.com/reflected/url/css_import?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '442', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1276', 'url': 'https://public-firing-range.appspot.com/reflected/url/script_src?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '443', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1276', 'url': 'https://public-firing-range.appspot.com/reflected/url/script_src?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '444', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1277', 'url': 'https://public-firing-range.appspot.com/reflected/url/object_data?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '445', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1277', 'url': 'https://public-firing-range.appspot.com/reflected/url/object_data?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '446', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1278', 'url': 'https://public-firing-range.appspot.com/reflected/url/object_param?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '447', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1278', 'url': 'https://public-firing-range.appspot.com/reflected/url/object_param?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '448', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1282', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/json?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '449', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1282', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/json?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '450', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1283', 'url': 'https://public-firing-range.appspot.com/reflected/contentsniffing/json?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '451', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1285', 'url': 'https://public-firing-range.appspot.com/reflected/jsoncallback', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '452', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1286', 'url': 'https://public-firing-range.appspot.com/reflected/contentsniffing/plaintext?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '453', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: "q" ].', 'method': 'GET', 'evidence': '<form method="POST">', 'pluginId': '10202', 'cweid': '352', 'confidence': 'Medium', 'wascid': '9', 'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", 'messageId': '1287', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/form', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'WSTG-v42-SESS-05': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html'}, 'reference': 'http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html', 'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.', 'alert': 'Absence of Anti-CSRF Tokens', 'param': '', 'attack': '', 'name': 'Absence of Anti-CSRF Tokens', 'risk': 'Low', 'id': '454', 'alertRef': '10202'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1287', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/form', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '455', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1287', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/form', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '456', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1289', 'url': 'https://public-firing-range.appspot.com/reflected/filteredcharsets/body/SpaceDoubleQuoteSlashEquals?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '457', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1289', 'url': 'https://public-firing-range.appspot.com/reflected/filteredcharsets/body/SpaceDoubleQuoteSlashEquals?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '458', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1292', 'url': 'https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseSensitive/script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '459', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1292', 'url': 'https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseSensitive/script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '460', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1296', 'url': 'https://public-firing-range.appspot.com/reflected/filteredcharsets/attribute_unquoted/DoubleQuoteSinglequote?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '461', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1296', 'url': 'https://public-firing-range.appspot.com/reflected/filteredcharsets/attribute_unquoted/DoubleQuoteSinglequote?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '462', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1305', 'url': 'https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseInsensitive/script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '465', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1305', 'url': 'https://public-firing-range.appspot.com/reflected/filteredstrings/body/caseInsensitive/script?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '466', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="https://google.com"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '1311', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'https://google.com', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '467', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1311', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '468', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1311', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/script?q=https://google.com', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '469', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '1312', 'url': 'https://public-firing-range.appspot.com/remoteinclude/script_hash.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '470', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1312', 'url': 'https://public-firing-range.appspot.com/remoteinclude/script_hash.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '471', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1312', 'url': 'https://public-firing-range.appspot.com/remoteinclude/script_hash.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '472', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1315', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/object_raw?q=https://google.com', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '473', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1315', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/object_raw?q=https://google.com', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '474', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1316', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/object/application_x-shockwave-flash?q=https://google.com', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '475', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1316', 'url': 'https://public-firing-range.appspot.com/remoteinclude/parameter/object/application_x-shockwave-flash?q=https://google.com', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '476', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '1322', 'url': 'https://public-firing-range.appspot.com/remoteinclude/object_hash.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '477', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1322', 'url': 'https://public-firing-range.appspot.com/remoteinclude/object_hash.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '478', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1322', 'url': 'https://public-firing-range.appspot.com/remoteinclude/object_hash.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '479', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1352', 'url': 'https://public-firing-range.appspot.com/tags/multiline?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '480', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1352', 'url': 'https://public-firing-range.appspot.com/tags/multiline?q=a', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '481', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1353', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/InCallback/?q=urc_button.click', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '482', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1353', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/InCallback/?q=urc_button.click', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '483', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1358', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/OtherParameter/?q=%26callback%3Durc_button.click%23', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '484', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1358', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInQuery/OtherParameter/?q=%26callback%3Durc_button.click%23', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '485', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'The following pattern was used: \\bFROM\\b and was detected in the element starting with: "<script>\n    var resultDiv = document.getElementById(\'result\');\n\n      /**\n       * Callback function that receives data from th", see evidence field for the suspicious comment/snippet.', 'method': 'GET', 'evidence': 'from', 'pluginId': '10027', 'cweid': '200', 'confidence': 'Low', 'wascid': '13', 'description': 'The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.', 'messageId': '1360', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A03': 'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html'}, 'reference': '', 'solution': 'Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.', 'alert': 'Information Disclosure - Suspicious Comments', 'param': '', 'attack': '', 'name': 'Information Disclosure - Suspicious Comments', 'risk': 'Informational', 'id': '486', 'alertRef': '10027'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1360', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '487', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1360', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/InCallback/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '488', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'The following pattern was used: \\bFROM\\b and was detected in the element starting with: "<script>\n    var resultDiv = document.getElementById(\'result\');\n\n      /**\n       * Callback function that receives data from th", see evidence field for the suspicious comment/snippet.', 'method': 'GET', 'evidence': 'from', 'pluginId': '10027', 'cweid': '200', 'confidence': 'Low', 'wascid': '13', 'description': 'The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.', 'messageId': '1363', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A03': 'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html'}, 'reference': '', 'solution': 'Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.', 'alert': 'Information Disclosure - Suspicious Comments', 'param': '', 'attack': '', 'name': 'Information Disclosure - Suspicious Comments', 'risk': 'Informational', 'id': '489', 'alertRef': '10027'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1363', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '490', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1363', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/singlepage/ParameterInFragment/OtherParameter/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '491', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1365', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithoutXFO/?q=foo', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '492', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1365', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithoutXFO/?q=foo', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '493', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1371', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithoutXFO/?q=%26callback%3Dfoo%23', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '494', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1371', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithoutXFO/?q=%26callback%3Dfoo%23', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '495', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'The following pattern was used: \\bFROM\\b and was detected in the element starting with: "<script>\n    var resultDiv = document.getElementById(\'result\');\n\n      /**\n       * Callback function that receives data from th", see evidence field for the suspicious comment/snippet.', 'method': 'GET', 'evidence': 'from', 'pluginId': '10027', 'cweid': '200', 'confidence': 'Low', 'wascid': '13', 'description': 'The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.', 'messageId': '1374', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A03': 'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html'}, 'reference': '', 'solution': 'Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.', 'alert': 'Information Disclosure - Suspicious Comments', 'param': '', 'attack': '', 'name': 'Information Disclosure - Suspicious Comments', 'risk': 'Informational', 'id': '496', 'alertRef': '10027'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1374', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '497', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1374', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithoutXFO/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '498', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'The following pattern was used: \\bFROM\\b and was detected in the element starting with: "<script>\n    var resultDiv = document.getElementById(\'result\');\n\n      /**\n       * Callback function that receives data from th", see evidence field for the suspicious comment/snippet.', 'method': 'GET', 'evidence': 'from', 'pluginId': '10027', 'cweid': '200', 'confidence': 'Low', 'wascid': '13', 'description': 'The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.', 'messageId': '1378', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A03': 'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html'}, 'reference': '', 'solution': 'Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.', 'alert': 'Information Disclosure - Suspicious Comments', 'param': '', 'attack': '', 'name': 'Information Disclosure - Suspicious Comments', 'risk': 'Informational', 'id': '499', 'alertRef': '10027'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1378', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '500', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1378', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithoutXFO/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '501', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1381', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/InCallback/WithXFO/?q=foo', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '502', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1383', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInQuery/OtherParameter/WithXFO/?q=%26callback%3Dfoo%23', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '503', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'The following pattern was used: \\bFROM\\b and was detected in the element starting with: "<script>\n    var resultDiv = document.getElementById(\'result\');\n\n      /**\n       * Callback function that receives data from th", see evidence field for the suspicious comment/snippet.', 'method': 'GET', 'evidence': 'from', 'pluginId': '10027', 'cweid': '200', 'confidence': 'Low', 'wascid': '13', 'description': 'The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.', 'messageId': '1385', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithXFO/', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A03': 'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html'}, 'reference': '', 'solution': 'Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.', 'alert': 'Information Disclosure - Suspicious Comments', 'param': '', 'attack': '', 'name': 'Information Disclosure - Suspicious Comments', 'risk': 'Informational', 'id': '504', 'alertRef': '10027'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1385', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/InCallback/WithXFO/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '505', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'The following pattern was used: \\bFROM\\b and was detected in the element starting with: "<script>\n    var resultDiv = document.getElementById(\'result\');\n\n      /**\n       * Callback function that receives data from th", see evidence field for the suspicious comment/snippet.', 'method': 'GET', 'evidence': 'from', 'pluginId': '10027', 'cweid': '200', 'confidence': 'Low', 'wascid': '13', 'description': 'The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.', 'messageId': '1387', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithXFO/', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A03': 'https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html'}, 'reference': '', 'solution': 'Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.', 'alert': 'Information Disclosure - Suspicious Comments', 'param': '', 'attack': '', 'name': 'Information Disclosure - Suspicious Comments', 'risk': 'Informational', 'id': '506', 'alertRef': '10027'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1387', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/multipage/ParameterInFragment/OtherParameter/WithXFO/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '507', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '1390', 'url': 'https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '508', 'alertRef': '10015'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="https://code.jquery.com/jquery-1.8.1.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '1390', 'url': 'https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'https://code.jquery.com/jquery-1.8.1.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '509', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1390', 'url': 'https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '510', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1390', 'url': 'https://public-firing-range.appspot.com/vulnerablelibraries/jquery.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '511', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1394', 'url': 'https://public-firing-range.appspot.com/urldom/jsonp?callback=foo', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '512', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1397', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/a.href', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '513', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1397', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/a.href', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '514', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1402', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/document.location', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '515', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1402', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/document.location', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '516', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1403', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/form.action', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '517', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1403', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/form.action', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '518', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1407', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/iframe.src', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '519', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1407', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/iframe.src', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '520', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1411', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/input.formaction', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '521', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1411', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/input.formaction', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '522', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1413', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/window.open', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '523', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1413', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/window.open', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '524', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1415', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/area.href?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '525', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1415', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/area.href?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '526', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1418', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/svg.a?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '527', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1418', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/svg.a?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '528', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1420', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/button.formaction?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '529', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1420', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/button.formaction?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '530', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1421', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/location.assign?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '531', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1421', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/location.assign?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '532', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1425', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/frame.src?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '533', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1425', 'url': 'https://public-firing-range.appspot.com/urldom/location/search/frame.src?//example.org', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '534', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1427', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/base.href', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '535', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1427', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/base.href', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '536', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1428', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/embed.src', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '537', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1428', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/embed.src', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '538', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1430', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/fetch', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '539', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1430', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/fetch', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '540', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1435', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/link.href', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '541', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1435', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/link.href', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '542', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1437', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/object.data', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '543', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1437', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/object.data', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '544', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1438', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/param.code.value', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '545', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1438', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/param.code.value', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '546', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1439', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/param.movie.value', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '547', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1439', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/param.movie.value', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '548', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1440', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/param.src.value', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '549', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1440', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/param.src.value', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '550', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1441', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/param.url.value', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '551', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1441', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/param.url.value', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '552', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1442', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.href', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '553', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1442', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.href', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '554', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1443', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.src', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '555', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1443', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.src', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '556', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1444', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/xhr.open', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '557', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1444', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/xhr.open', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '558', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1445', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_domain', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '559', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1445', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_domain', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '560', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1446', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_path', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '561', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1446', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_path', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '562', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1447', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_query', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '563', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1447', 'url': 'https://public-firing-range.appspot.com/urldom/location/hash/script.src.partial_query', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '564', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1448', 'url': 'https://public-firing-range.appspot.com/urldom/jsonp?callback=foobar', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '565', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'frame-ancestors https://google.com', 'pluginId': '10055', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connects-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'messageId': '1449', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnocoverdomain', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': '', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '566', 'alertRef': '10055'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1449', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnocoverdomain', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '567', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1450', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnoframeancestors', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '568', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'ALLOW-FROM https://example.com', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': 'An X-Frame-Options header was present in the response but the value was not correctly set.', 'messageId': '1450', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/xfoallowfromnoframeancestors', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://tools.ietf.org/html/rfc7034#section-2.1', 'solution': 'Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'X-Frame-Options Setting Malformed', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Setting Malformed', 'risk': 'Medium', 'id': '569', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'frame-ancestors https://example.com', 'pluginId': '10055', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connects-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'messageId': '1451', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnoxfoallowfrom', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': '', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '570', 'alertRef': '10055'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1451', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnoxfoallowfrom', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '571', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': "frame-ancestors 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connects-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'messageId': '1452', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsselfnoxfosameorigin', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': '', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '572', 'alertRef': '10055'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1452', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsselfnoxfosameorigin', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '573', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'frame-ancestors https://google.com', 'pluginId': '10055', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connects-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'messageId': '1453', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/xfosameoriginnoframeancestorsself', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': '', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '574', 'alertRef': '10055'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1453', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/xfosameoriginnoframeancestorsself', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '575', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': "frame-ancestors 'none'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connects-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'messageId': '1454', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnonenoxfodeny', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': '', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '576', 'alertRef': '10055'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1454', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/frameancestorsnonenoxfodeny', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '577', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': "frame-ancestors 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nscript-src, style-src, img-src, connects-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src, form-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'messageId': '1455', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/xfodenynoframeancestorsnone', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': '', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '578', 'alertRef': '10055'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1455', 'url': 'https://public-firing-range.appspot.com/invalidframingconfig/xfodenynoframeancestorsnone', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '579', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'Set-Cookie: my_secret_cookie', 'pluginId': '10054', 'cweid': '1275', 'confidence': 'Medium', 'wascid': '13', 'description': "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.", 'messageId': '1456', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedcookie', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'WSTG-v42-SESS-02': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html'}, 'reference': 'https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site', 'solution': "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.", 'alert': 'Cookie without SameSite Attribute', 'param': 'my_secret_cookie', 'attack': '', 'name': 'Cookie without SameSite Attribute', 'risk': 'Low', 'id': '580', 'alertRef': '10054'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'Set-Cookie: my_secret_cookie', 'pluginId': '10011', 'cweid': '614', 'confidence': 'Medium', 'wascid': '13', 'description': 'A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.', 'messageId': '1456', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedcookie', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-SESS-02': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html', 'solution': 'Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.', 'alert': 'Cookie Without Secure Flag', 'param': 'my_secret_cookie', 'attack': '', 'name': 'Cookie Without Secure Flag', 'risk': 'Low', 'id': '581', 'alertRef': '10011'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1456', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedcookie', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '582', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1456', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedcookie', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '583', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'Set-Cookie: my_secret_cookie', 'pluginId': '10054', 'cweid': '1275', 'confidence': 'Medium', 'wascid': '13', 'description': "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.", 'messageId': '1457', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedinresource', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'WSTG-v42-SESS-02': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html'}, 'reference': 'https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site', 'solution': "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.", 'alert': 'Cookie without SameSite Attribute', 'param': 'my_secret_cookie', 'attack': '', 'name': 'Cookie without SameSite Attribute', 'risk': 'Low', 'id': '584', 'alertRef': '10054'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'Set-Cookie: my_secret_cookie', 'pluginId': '10011', 'cweid': '614', 'confidence': 'Medium', 'wascid': '13', 'description': 'A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.', 'messageId': '1457', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedinresource', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-SESS-02': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html', 'solution': 'Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.', 'alert': 'Cookie Without Secure Flag', 'param': 'my_secret_cookie', 'attack': '', 'name': 'Cookie Without Secure Flag', 'risk': 'Low', 'id': '585', 'alertRef': '10011'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1457', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedinresource', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '586', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1457', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedinresource', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '587', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'POST', 'evidence': '<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '1459', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '588', 'alertRef': '10017'}, {'sourceid': '3', 'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: "q" ].', 'method': 'POST', 'evidence': '<form action="" method="post">', 'pluginId': '10202', 'cweid': '352', 'confidence': 'Medium', 'wascid': '9', 'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", 'messageId': '1459', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'WSTG-v42-SESS-05': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html'}, 'reference': 'http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html', 'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.', 'alert': 'Absence of Anti-CSRF Tokens', 'param': '', 'attack': '', 'name': 'Absence of Anti-CSRF Tokens', 'risk': 'Low', 'id': '589', 'alertRef': '10202'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'POST', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1459', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '590', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'POST', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1459', 'url': 'https://public-firing-range.appspot.com/angular/angular_body_raw_post/1.6.0', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '591', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1460', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '592', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1464', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '593', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1466', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '594', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1467', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '595', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1468', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/localStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '596', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1470', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/array/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '597', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1473', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/eval', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '598', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1475', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/innerHtml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '599', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1476', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/function/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '600', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1477', 'url': 'https://public-firing-range.appspot.com/dom/toxicdomscripts/sessionStorage/property/documentWrite', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '601', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'public, max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Medium', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.', 'messageId': '1480', 'url': 'https://public-firing-range.appspot.com/', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control', 'solution': 'Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.', 'alert': 'Incomplete or No Cache-control Header Set', 'param': 'Cache-Control', 'attack': '', 'name': 'Incomplete or No Cache-control Header Set', 'risk': 'Low', 'id': '602', 'alertRef': '10015'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1480', 'url': 'https://public-firing-range.appspot.com/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '603', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1480', 'url': 'https://public-firing-range.appspot.com/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '604', 'alertRef': '10020'}, {'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HTTP/1.1 500 Internal Server Error', 'pluginId': '90022', 'cweid': '200', 'confidence': 'Medium', 'wascid': '13', 'description': 'This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.', 'messageId': '1485', 'url': 'https://public-firing-range.appspot.com/reflected/url/a', 'tags': {'WSTG-v42-ERRH-02': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces', 'WSTG-v42-ERRH-01': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling', 'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': '', 'solution': 'Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.', 'alert': 'Application Error Disclosure', 'param': '', 'attack': '', 'name': 'Application Error Disclosure', 'risk': 'Low', 'id': '605', 'alertRef': '90022'}, {'sourceid': '3', 'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: "q" ].', 'method': 'POST', 'evidence': '<form method="POST">', 'pluginId': '10202', 'cweid': '352', 'confidence': 'Medium', 'wascid': '9', 'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", 'messageId': '1487', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/form', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'WSTG-v42-SESS-05': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html'}, 'reference': 'http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html', 'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.', 'alert': 'Absence of Anti-CSRF Tokens', 'param': '', 'attack': '', 'name': 'Absence of Anti-CSRF Tokens', 'risk': 'Low', 'id': '606', 'alertRef': '10202'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'POST', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1487', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/form', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '607', 'alertRef': '10021'}, {'sourceid': '3', 'other': '', 'method': 'POST', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.", 'messageId': '1487', 'url': 'https://public-firing-range.appspot.com/reflected/parameter/form', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it\'s set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive. ', 'alert': 'X-Frame-Options Header Not Set', 'param': 'X-Frame-Options', 'attack': '', 'name': 'X-Frame-Options Header Not Set', 'risk': 'Medium', 'id': '608', 'alertRef': '10020'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1492', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/jsonpendpoint?callback=urc_button.click&q', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '609', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1493', 'url': 'https://public-firing-range.appspot.com/reverseclickjacking/jsonpendpoint?callback=foo&q', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '610', 'alertRef': '10021'}, {'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1498', 'url': 'https://public-firing-range.appspot.com/leakedcookie/leakedcookie.js', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'X-Content-Type-Options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '611', 'alertRef': '10021'}]